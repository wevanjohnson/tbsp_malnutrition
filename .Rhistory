sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
length(sigGenesTB)
sigGenesT
sigGenesTB
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame("TB Status"=colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB_status = c(
"TB" = special_red, "LTBI" = special_blue)))
special_red <- RColorBrewer::brewer.pal(3, "Set1")[1]
special_blue <- RColorBrewer::brewer.pal(3, "Set1")[2]
# COLORS FOR HEATMAP
col.me <- viridis::viridis(15)
colorList <- list("status" = setNames(c(special_red,
special_blue),
c("TB_mal", "LTBI_mal")))
# colorList <- list("status" = setNames(c(viridis::magma(20)[12],
#                                         viridis::magma(20)[18]),
#                                       c("TB_mal", "LTBI_mal")))
#mat <- readRDS("~/projects/malnutrition/DiffExp_matrix_mal.RDS")
#df_mal <- readRDS("~/projects/malnutrition/DiffExp_annot_mal.RDS")
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame("TB Status"=colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB_status = c(
"TB" = special_red, "LTBI" = special_blue)))
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Diff. Exp")
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Expression")
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig)))
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig))
designBC <- model.matrix(~Tb_status, data=colData(indata))
colnames(designBC) <- c("Intercept", "activeTB")
fitBC <- lmFit(assay(indata, "log_cpm"), designBC)
contrast.matrixTB<- makeContrasts(activeTB, levels = designBC)
fitTB <- contrasts.fit(fitBC,contrast.matrixTB)
fitTB <- eBayes(fitTB)
limmaResTB <- topTable(fitTB, adjust.method = "BH", n = Inf, sort.by = "P")
#Getting significant genes and rownames to plot
adjpcutoff <- 0.01
limmaResTB.sig <- subset(limmaResTB, adj.P.Val < adjpcutoff)
write.csv(limmaResTB.sig,"~/projects/malnutrition/manuscript_BMC_ID/figures/malnut_only_siggenes.csv",quote=F)
datatable(limmaResTB.sig,options=list(scrollX=T,pageLength=15),rownames = T)
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig))
### keep only protein coding genes
annotations <- rowData(indata)[match(rownames(limmaResTB.sig), rowData(indata)[,1]),2]
table(annotations)
sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame("TB Status"=colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB_status = c(
"TB" = special_red, "LTBI" = special_blue)))
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Expression")
sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
india44 <- read.table("~/projects/malnutrition/manuscript_BMC_ID/features_combined_44.txt", sep = "\t")
india48 <- read.table("~/projects/malnutrition/manuscript_BMC_ID/features_combined_48.txt", sep = "\t")
coldata <- read.table("~/projects/malnutrition/manuscript_BMC_ID/india_colData.txt", sep = "\t", header = TRUE)
rowdata <- read.table("~/projects/malnutrition/manuscript_BMC_ID/feature_types.txt", header=TRUE)
#replace colnames of india44
colnames(india44) <- gsub(x = colnames(india44), pattern= "SO_5007_([A-B])[0-9,A-Z]_([0-9]*)_[1-2]", replace="102\\2\\1")
colnames(india44) <- gsub(x = colnames(india44), pattern= "SO_5007_Set2_102_0?([0-9][0-9][0-9][0-9][0-9])", replace="102\\1A")
# Check that gsub did not create two columns with same name
stopifnot(length(unique(colnames(india44)))==44)
# Check that all column names are present in coldata
stopifnot(all(colnames(india44) %in% coldata$SUBJID))
# india48 colname replace
colnames(india48) <- gsub(x=colnames(india48), pattern="X102.([0-9]*).([A-B])0?", replace="102\\1\\2")
# Check that gsub did not create two columns with same name
stopifnot(length(unique(colnames(india48)))==48)
# Check that all column names are present in coldata
stopifnot(all(colnames(india48) %in% coldata$SUBJID))
#combine the india files, match colData and rowData
india <- as.matrix(cbind(india44, india48))
india <- india[,match(coldata$SUBJID,colnames(india))]
rowdata <- rowdata[match(rownames(india),rowdata[,1]),]
# make Summarized Experiment object
indata <- SummarizedExperiment(assays = SimpleList(counts = as.matrix(india)), colData = coldata, rowData = rowdata)
saveRDS(indata, file = "~/projects/malnutrition/manuscript_BMC_ID/indata_SCE.rds")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SingleCellExperiment)
library(tidyverse)
library(TBSignatureProfiler)
library(sva)
library(Rtsne)
library(umap)
library(limma)
library(DT)
library(ComplexHeatmap)
library(enrichR)
})
india44 <- read.table("~/projects/malnutrition/manuscript_BMC_ID/features_combined_44.txt", sep = "\t")
india48 <- read.table("~/projects/malnutrition/manuscript_BMC_ID/features_combined_48.txt", sep = "\t")
coldata <- read.table("~/projects/malnutrition/manuscript_BMC_ID/india_colData.txt", sep = "\t", header = TRUE)
rowdata <- read.table("~/projects/malnutrition/manuscript_BMC_ID/feature_types.txt", header=TRUE)
#replace colnames of india44
colnames(india44) <- gsub(x = colnames(india44), pattern= "SO_5007_([A-B])[0-9,A-Z]_([0-9]*)_[1-2]", replace="102\\2\\1")
colnames(india44) <- gsub(x = colnames(india44), pattern= "SO_5007_Set2_102_0?([0-9][0-9][0-9][0-9][0-9])", replace="102\\1A")
# Check that gsub did not create two columns with same name
stopifnot(length(unique(colnames(india44)))==44)
# Check that all column names are present in coldata
stopifnot(all(colnames(india44) %in% coldata$SUBJID))
# india48 colname replace
colnames(india48) <- gsub(x=colnames(india48), pattern="X102.([0-9]*).([A-B])0?", replace="102\\1\\2")
# Check that gsub did not create two columns with same name
stopifnot(length(unique(colnames(india48)))==48)
# Check that all column names are present in coldata
stopifnot(all(colnames(india48) %in% coldata$SUBJID))
#combine the india files, match colData and rowData
india <- as.matrix(cbind(india44, india48))
india <- india[,match(coldata$SUBJID,colnames(india))]
rowdata <- rowdata[match(rownames(india),rowdata[,1]),]
# make Summarized Experiment object
indata <- SummarizedExperiment(assays = SimpleList(counts = as.matrix(india)), colData = coldata, rowData = rowdata)
saveRDS(indata, file = "~/projects/malnutrition/manuscript_BMC_ID/indata_SCE.rds")
colnames(india48)
india48 <- read.table("~/projects/malnutrition/manuscript_BMC_ID/features_combined_48.txt", sep = "\t")
colnames(india48)
cat(colnames(india48))
cat(colnames(india48),sep='\n')
devtools::install_github("TBSignatureProfiler")
devtools::install_github("compbiomed/TBSignatureProfiler")
devtools::install_github("compbiomed/TBSignatureProfiler")
install.package("backports")
install.packages("backports")
install.packages("backports")
install.packages("backports")
# ssGSEA
png(filename = "figures/ssgsea_ROC.png", width = 11, height = 9, units = "in",
res = 150)
signatureROCplot_CI(ssgsea_res, signatureColNames = names(TBsignatures),
scale = TRUE, annotationColName = "status",
name =
"ROC Plots for Gene Signatures, 95% Confidence, ssGSEA",
nrow = 6, ncol = 6, choose_colors = c(special_blue,
"gray50",
"gray79"))
dev.off()
?TBSignatureProfiler::signatureROCplot_CI
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SingleCellExperiment)
library(tidyverse)
library(TBSignatureProfiler)
library(sva)
library(Rtsne)
library(umap)
library(limma)
library(DT)
library(ComplexHeatmap)
library(enrichR)
library(singleCellTK)
})
# Chunk 5: load
indata <- readRDS("indata_SCE_batchcorrect.rds")
dim(indata)
## Filter to have 10% present rate
indata <- indata[apply(assay(indata,"counts") != 0, 1, mean)>.20,]
dim(indata)
### Malnutrition only
indata <- indata[,which(colData(indata)$bmi_cat2 == "mal")]
dim(indata)
# Chunk 6
indataTMP <- indata
indataTMP <- mkAssay(indataTMP, input_name = "counts", log=T)
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indataTMP, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indataTMP)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_raw.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
rm(indataTMP)
# Chunk 7
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_adj_colbatch.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
# Chunk 8
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch",colorBy = "status")
png(filename = "figures/PCA_adj_colstatus.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch", colorBy = "status")
dev.off()
rm(indataSCE)
# Chunk 9
set.seed(1)
tsne_out <- Rtsne(t(assay(indata,"log_cpm")), check_duplicates = FALSE, pca = TRUE, perplexity=10, theta=0.5, dims=2)
embedding <- as.data.frame(tsne_out$Y)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("T-SNE 1") + ylab("T-SNE 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TSNE Plot")
plot(g)
# Chunk 10
set.seed(1)
umap_out <- umap(t(assay(indata,"log_cpm")))
embedding <- as.data.frame(umap_out$layout)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("UMAP 1") + ylab("UMAP 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("UMAP Plot")
plot(g)
# Chunk 11
designBC <- model.matrix(~Tb_status, data=colData(indata))
colnames(designBC) <- c("Intercept", "activeTB")
fitBC <- lmFit(assay(indata, "log_cpm"), designBC)
contrast.matrixTB<- makeContrasts(activeTB, levels = designBC)
fitTB <- contrasts.fit(fitBC,contrast.matrixTB)
fitTB <- eBayes(fitTB)
limmaResTB <- topTable(fitTB, adjust.method = "BH", n = Inf, sort.by = "P")
#Getting significant genes and rownames to plot
adjpcutoff <- 0.01
limmaResTB.sig <- subset(limmaResTB, adj.P.Val < adjpcutoff)
write.csv(limmaResTB.sig,"figures/malnut_only_siggenes.csv",quote=F)
datatable(limmaResTB.sig,options=list(scrollX=T,pageLength=15),rownames = T)
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig))
### keep only protein coding genes
annotations <- rowData(indata)[match(rownames(limmaResTB.sig), rowData(indata)[,1]),2]
table(annotations)
sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
# Chunk 12
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame(TB_status=colData(indata)$Tb_status)
ha = HeatmapAnnotation(df = df, col = list(TB_status=c("TB"="Red","LTBI"="Blue")))
Heatmap(mat,show_row_names=F,show_column_names = F, top_annotation = ha)
# Chunk 13
# some things related to colors
special_red <- RColorBrewer::brewer.pal(3, "Set1")[1]
special_blue <- RColorBrewer::brewer.pal(3, "Set1")[2]
# COLORS FOR HEATMAP
col.me <- viridis::viridis(15)
colorList <- list("status" = setNames(c("Red",
"Blue"),
c("TB_mal", "LTBI_mal")))
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame("TB Status"=colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB.Status = c(
"TB" = "Red", "LTBI" = "Blue")))
png(filename = "figures/Heatmap_DIFF_EXP.png", width = 12, height = 10, units = "in",
res = 150)
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Expression")
dev.off()
# Chunk 14
pathway=enrichr(sigGenesTB[1:1000],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
# Chunk 15
datatable(pathway$WikiPathways_2013[pathway$WikiPathways_2013$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 16
datatable(pathway$Reactome_2016[pathway$Reactome_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 17
datatable(pathway$KEGG_2016[pathway$KEGG_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 18
datatable(pathway$Panther_2016[pathway$Panther_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 19
TBsignatures$'Suliman_RISK_4' <- c("GAS6","SEPTIN4","CD1C","BLK")
TBsignatures$'Lee_4' <- c("INTS13", "DHX29", "NEMF",  "PTPRC")
indata$TB.status <- factor(paste(indata$status))
siglist_mal <- names(TBsignatures)
ssgsea_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "ssGSEA")
gsva_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "GSVA")
plage_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "PLAGE")
# Chunk 20
# some things related to colors
special_red <- RColorBrewer::brewer.pal(3, "Set1")[1]
special_blue <- RColorBrewer::brewer.pal(3, "Set1")[2]
# COLORS FOR HEATMAP
col.me <- viridis::viridis(15)
colorList <- list("status" = setNames(c(special_red,
special_blue),
c("TB_mal", "LTBI_mal")))
# colorList <- list("status" = setNames(c(viridis::magma(20)[12],
#                                         viridis::magma(20)[18]),
#                                       c("TB_mal", "LTBI_mal")))
png(filename = "figures/genes_in_5plus.png", width = 8, height = 7,
units = "in", res = 150)
genesin5ormore <- names(sort(table(unlist(TBsignatures)),
decreasing = TRUE)[sort(table(unlist(TBsignatures)),
decreasing = TRUE) > 4])
geneoverlapdf <- data.frame(row.names = genesin5ormore)
for(i in names(TBsignatures)){
geneoverlapdf[,i] <- ifelse(rownames(geneoverlapdf)%in% TBsignatures[[i]],
"Yes", "No")
}
geneoverlapdf <- geneoverlapdf[,order(colSums(geneoverlapdf == "Yes"),
decreasing = TRUE)]
geneoverlapdf <- geneoverlapdf[order(rowSums(geneoverlapdf == "Yes"),
decreasing = TRUE),]
draw(Heatmap(t(as.matrix(geneoverlapdf)), col=c("white", special_blue),
row_names_gp = gpar(fontsize = 8),
column_names_gp = gpar(fontsize = 8),
rect_gp = gpar(col="grey", lty=1),
name = "Gene in Signature"),
heatmap_legend_side = "bottom")
dev.off()
# Chunk 21
overlap_matrix <- matrix(0, nrow = length(TBsignatures),
ncol = length(TBsignatures))
for (i in 1:length(TBsignatures)){
for (j in 1:length(TBsignatures)){
overlap_matrix[i, j] <- sum(
!is.na(match(TBsignatures[[i]],
TBsignatures[[j]]))) / length(TBsignatures[[i]])
}
}
rownames(overlap_matrix) <- colnames(overlap_matrix) <- names(TBsignatures)
over_pct <- round(overlap_matrix, 3) * 100
write.csv(overlap_matrix, file = "figures/overlap.csv", quote = FALSE)
# Chunk 22
png(filename = "figures/Heatmap_ssGSEA.png", width = 12, height = 10, units = "in",
res = 150)
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
colList = colorList)
dev.off()
# Chunk 23
png(filename = "figures/Heatmap_GSVA.png", width = 12, height = 10, units = "in",res = 150)
signatureHeatmap(gsva_res, name = "GSVA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
colList = colorList)
dev.off()
# Chunk 24
png(filename = "figures/AUC_boxplot_ssGSEA.png", width = 10, height = 10,
units = "in", res = 150)
signatureBoxplot(ssgsea_res, name="ssGSEA",
signatureColNames = names(TBsignatures),
annotationColName = c("status"),
fill_colors = c(special_blue, special_red))
dev.off()
# Chunk 25
png(filename = "figures/score_boxplot_ssGSEA.png", width = 7, height = 5,
units = "in", res = 150)
par(mar = c(7,2,2,1))
compareBoxplots(ssgsea_res, signatureColNames = names(TBsignatures),
annotationColName = "status", pb.show = TRUE,
name = "ssGSEA", rotateLabels = TRUE,
fill.col = special_red)
dev.off()
# Chunk 26
png(filename = "figures/AUC_boxplot_GSVA.png", width = 10, height = 10, units = "in",
res = 150)
signatureBoxplot(gsva_res, signatureColNames = names(TBsignatures),
annotationColName = c("status"), name = "GSVA",
fill_colors = c(special_blue, special_red),
rotateLabels = TRUE)
dev.off()
# Chunk 27
png(filename = "figures/score_boxplot_GSVA.png", width = 7, height = 5,
units = "in", res = 150)
par(mar = c(7,2,2,1))
compareBoxplots(gsva_res, signatureColNames = names(TBsignatures),
annotationColName = "status", pb.show = TRUE,
name = "GSVA", fill.col = special_red,
rotateLabels = TRUE)
dev.off()
# Chunk 28
# Sambarey_HIV_10
png(filename = "figures/Sambarey_HIV_10.png", width = 6, height = 4, units = "in",
res = 150)
signatureGeneHeatmap(ssgsea_res, useAssay = "log_cpm",
sigGenes = TBsignatures[["Sambarey_HIV_10"]],
name = "Sambarey_HIV_10", signatureColNames = NULL,
annotationColNames = c("status"), scale = TRUE,
choose_color = col.me,
colList = colorList,
cluster_columns = TRUE,
showColumnNames = FALSE)
dev.off()
# Chunk 29
png(filename = "figures/Thompson_9.png", width = 6, height = 4, units = "in",
res = 150)
signatureGeneHeatmap(ssgsea_res, useAssay = "log_cpm",
TBsignatures[["Thompson_9"]],
name = "Thompson_9", signatureColNames = NULL,
choose_color = col.me,
colList = colorList,
annotationColNames = c("status"),
cluster_columns = TRUE,
showColumnNames = FALSE)
dev.off()
# Chunk 30
png(filename = "figures/Lee_4.png", width = 6, height = 4, units = "in",
res = 150)
signatureGeneHeatmap(ssgsea_res, useAssay = "log_cpm",
TBsignatures[["Lee_4"]],
name = "Lee_4", signatureColNames = NULL,
choose_color = col.me,
colList = colorList,
annotationColNames = c("status"),
cluster_columns = TRUE,
showColumnNames = FALSE)
dev.off()
# Chunk 31
png(filename = "figures/Maertzdorf_4.png", width = 6, height = 4, units = "in",
res = 150)
signatureGeneHeatmap(ssgsea_res, useAssay = "log_cpm",
TBsignatures[["Maertzdorf_4"]],
name = "Maertzdorf_4", signatureColNames = NULL,
choose_color = col.me,
colList = colorList,
annotationColNames = c("status"),
cluster_columns = TRUE,
showColumnNames = FALSE)
dev.off()
# Chunk 32
# ssGSEA
png(filename = "figures/ssgsea_ROC.png", width = 11, height = 9, units = "in",
res = 150)
signatureROCplot_CI(ssgsea_res, signatureColNames = names(TBsignatures),
scale = TRUE, annotationColName = "status",
name =
"ROC Plots for Gene Signatures, 95% Confidence, ssGSEA",
nrow = 7, ncol = 7, choose_colors = c(special_blue,
"gray50",
"gray79"))
dev.off()
# Chunk 33
png(filename = "figures/gsva_ROC.png", width = 11, height = 9, units = "in",
res = 150)
signatureROCplot_CI(gsva_res, signatureColNames = names(TBsignatures),
scale = TRUE, annotationColName = "status",
name =
"ROC Plots for Gene Signatures, 95% Confidence, GSVA",
nrow = 7, ncol = 7, choose_colors = c(special_blue,
"gray50",
"gray79"),
)
dev.off()
# Chunk 34
out.ssgsea <- tableAUC(ssgsea_res, "status", names(TBsignatures),
output = "data.frame")
datatable(out.ssgsea)
write.csv(out.ssgsea, file = "figures/ssGSEA_TableAUC.csv")
# Chunk 35
out.gsva <- tableAUC(gsva_res, "status", names(TBsignatures), output = "data.frame")
datatable(out.gsva)
# Chunk 36
out.plage <- tableAUC(plage_res, "status", names(TBsignatures), output = "data.frame")
datatable(out.plage)
# Chunk 37
png(filename = "figures/AUC_boxplot_.png", width = 10, height = 10, units = "in",
res = 150)
signatureBoxplot(plage_res, signatureColNames = names(TBsignatures),
annotationColName = c("status"), name = "PLAGE",
fill_colors = c(special_blue, special_red),
rotateLabels = TRUE)
dev.off()
# Chunk 38
png(filename = "figures/score_boxplot_PLAGE.png", width = 7, height = 5,
units = "in", res = 150)
par(mar = c(7,2,2,1))
compareBoxplots(plage_res, signatureColNames = names(TBsignatures),
annotationColName = "status", pb.show = TRUE,
name = "PLAGE", fill.col = special_red,
rotateLabels = TRUE)
dev.off()
# Chunk 39
png(filename = "figures/Heatmap_PLAGE.png", width = 12, height = 10, units = "in",
res = 150)
signatureHeatmap(plage_res, name = "PLAGE",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
colList = colorList)
dev.off()
# Chunk 40: session info
sessionInfo()
