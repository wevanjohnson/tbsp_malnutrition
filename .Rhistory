dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_adj_colbatch.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
# Chunk 8
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch",colorBy = "status")
png(filename = "figures/PCA_adj_colstatus.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch", colorBy = "status")
dev.off()
rm(indataSCE)
# Chunk 9
set.seed(1)
tsne_out <- Rtsne(t(assay(indata,"log_cpm")), check_duplicates = FALSE, pca = TRUE, perplexity=10, theta=0.5, dims=2)
embedding <- as.data.frame(tsne_out$Y)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("T-SNE 1") + ylab("T-SNE 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TSNE Plot")
plot(g)
# Chunk 10
set.seed(1)
umap_out <- umap(t(assay(indata,"log_cpm")))
embedding <- as.data.frame(umap_out$layout)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("UMAP 1") + ylab("UMAP 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("UMAP Plot")
plot(g)
# Chunk 11
designBC <- model.matrix(~Tb_status, data=colData(indata))
colnames(designBC) <- c("Intercept", "activeTB")
fitBC <- lmFit(assay(indata, "log_cpm"), designBC)
contrast.matrixTB<- makeContrasts(activeTB, levels = designBC)
fitTB <- contrasts.fit(fitBC,contrast.matrixTB)
fitTB <- eBayes(fitTB)
limmaResTB <- topTable(fitTB, adjust.method = "BH", n = Inf, sort.by = "P")
#Getting significant genes and rownames to plot
adjpcutoff <- 0.01
limmaResTB.sig <- subset(limmaResTB, adj.P.Val < adjpcutoff)
write.csv(limmaResTB.sig,"figures/malnut_only_siggenes.csv",quote=F)
datatable(limmaResTB.sig,options=list(scrollX=T,pageLength=15),rownames = T)
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig))
### keep only protein coding genes
annotations <- rowData(indata)[match(rownames(limmaResTB.sig), rowData(indata)[,1]),2]
table(annotations)
sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
# Chunk 12
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame(TB_status=colData(indata)$Tb_status)
ha = HeatmapAnnotation(df = df, col = list(TB_status=c("TB"="Red","LTBI"="Blue")))
Heatmap(mat,show_row_names=F,show_column_names = F, top_annotation = ha)
# Chunk 13
# some things related to colors
special_red <- RColorBrewer::brewer.pal(3, "Set1")[1]
special_blue <- RColorBrewer::brewer.pal(3, "Set1")[2]
# COLORS FOR HEATMAP
col.me <- viridis::viridis(15)
colorList <- list("status" = setNames(c("Red",
"Blue"),
c("TB_mal", "LTBI_mal")))
mat <- as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df <- data.frame("TB Status" = colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB.Status = c(
"TB" = "Red", "LTBI" = "Blue")))
png(filename = "figures/Heatmap_DIFF_EXP.png", width = 12, height = 10, units = "in",
res = 150)
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Expression")
dev.off()
# Chunk 14
pathway=enrichr(sigGenesTB[1:1000],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#try 250, 500, 2000 and all genes per the paper reviewers request
#pathway=enrichr(sigGenesTB[1:250],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB[1:500],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB[1:2000],databases =c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
# Chunk 15
datatable(pathway$WikiPathways_2013[pathway$WikiPathways_2013$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 16
datatable(pathway$Reactome_2016[pathway$Reactome_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 17
datatable(pathway$KEGG_2016[pathway$KEGG_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 18
datatable(pathway$Panther_2016[pathway$Panther_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 19
indata$TB.status <- factor(paste(indata$status))
ssgsea_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "ssGSEA")
gsva_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "GSVA")
plage_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "PLAGE")
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
annotationSignature = sigAnnotData[order(sigAnnotData[,1]),],
colList = colorList)
sigAnnotData
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SingleCellExperiment)
library(tidyverse)
library(TBSignatureProfiler)
library(sva)
library(Rtsne)
library(umap)
library(limma)
library(DT)
library(ComplexHeatmap)
library(enrichR)
library(singleCellTK)
})
## remove the following signatures from the list, as they were not part of the TBSG at the time of submission:
TBsignatures <- TBsignatures[!(names(TBsignatures)%in%c("Darboe_RISK_11","Dawany_HIV_251","Tornheim_71","Tornheim_RES_25"))]
#sigAnnotData <- sigAnnotData[!(names(TBsignatures)%in%c("Darboe_RISK_11","Dawany_HIV_251","Tornheim_71","Tornheim_RES_25")),]
# Chunk 5: load
indata <- readRDS("indata_SCE_batchcorrect.rds")
dim(indata)
## Filter to have 10% present rate
indata <- indata[apply(assay(indata,"counts") != 0, 1, mean)>.20,]
dim(indata)
### Malnutrition only
indata <- indata[,which(colData(indata)$bmi_cat2 == "mal")]
dim(indata)
# Chunk 6
indataTMP <- indata
indataTMP <- mkAssay(indataTMP, input_name = "counts", log=T)
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indataTMP, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indataTMP)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_raw.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
rm(indataTMP)
# Chunk 7
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_adj_colbatch.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
# Chunk 8
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch",colorBy = "status")
png(filename = "figures/PCA_adj_colstatus.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch", colorBy = "status")
dev.off()
rm(indataSCE)
# Chunk 9
set.seed(1)
tsne_out <- Rtsne(t(assay(indata,"log_cpm")), check_duplicates = FALSE, pca = TRUE, perplexity=10, theta=0.5, dims=2)
embedding <- as.data.frame(tsne_out$Y)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("T-SNE 1") + ylab("T-SNE 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TSNE Plot")
plot(g)
# Chunk 10
set.seed(1)
umap_out <- umap(t(assay(indata,"log_cpm")))
embedding <- as.data.frame(umap_out$layout)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("UMAP 1") + ylab("UMAP 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("UMAP Plot")
plot(g)
# Chunk 11
designBC <- model.matrix(~Tb_status, data=colData(indata))
colnames(designBC) <- c("Intercept", "activeTB")
fitBC <- lmFit(assay(indata, "log_cpm"), designBC)
contrast.matrixTB<- makeContrasts(activeTB, levels = designBC)
fitTB <- contrasts.fit(fitBC,contrast.matrixTB)
fitTB <- eBayes(fitTB)
limmaResTB <- topTable(fitTB, adjust.method = "BH", n = Inf, sort.by = "P")
#Getting significant genes and rownames to plot
adjpcutoff <- 0.01
limmaResTB.sig <- subset(limmaResTB, adj.P.Val < adjpcutoff)
write.csv(limmaResTB.sig,"figures/malnut_only_siggenes.csv",quote=F)
datatable(limmaResTB.sig,options=list(scrollX=T,pageLength=15),rownames = T)
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig))
### keep only protein coding genes
annotations <- rowData(indata)[match(rownames(limmaResTB.sig), rowData(indata)[,1]),2]
table(annotations)
sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
# Chunk 12
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame(TB_status=colData(indata)$Tb_status)
ha = HeatmapAnnotation(df = df, col = list(TB_status=c("TB"="Red","LTBI"="Blue")))
Heatmap(mat,show_row_names=F,show_column_names = F, top_annotation = ha)
# Chunk 13
# some things related to colors
special_red <- RColorBrewer::brewer.pal(3, "Set1")[1]
special_blue <- RColorBrewer::brewer.pal(3, "Set1")[2]
# COLORS FOR HEATMAP
col.me <- viridis::viridis(15)
colorList <- list("status" = setNames(c("Red",
"Blue"),
c("TB_mal", "LTBI_mal")))
mat <- as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df <- data.frame("TB Status" = colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB.Status = c(
"TB" = "Red", "LTBI" = "Blue")))
png(filename = "figures/Heatmap_DIFF_EXP.png", width = 12, height = 10, units = "in",
res = 150)
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Expression")
dev.off()
# Chunk 14
pathway=enrichr(sigGenesTB[1:1000],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#try 250, 500, 2000 and all genes per the paper reviewers request
#pathway=enrichr(sigGenesTB[1:250],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB[1:500],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB[1:2000],databases =c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
# Chunk 15
datatable(pathway$WikiPathways_2013[pathway$WikiPathways_2013$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 16
datatable(pathway$Reactome_2016[pathway$Reactome_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 17
datatable(pathway$KEGG_2016[pathway$KEGG_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 18
datatable(pathway$Panther_2016[pathway$Panther_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 19
indata$TB.status <- factor(paste(indata$status))
ssgsea_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "ssGSEA")
gsva_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "GSVA")
plage_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "PLAGE")
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
annotationSignature = sigAnnotData[order(sigAnnotData[,1]),],
colList = colorList)
sigAnnotData <- sigAnnotData[!(names(TBsignatures)%in%c("Darboe_RISK_11","Dawany_HIV_251","Tornheim_71","Tornheim_RES_25")),]
sigAnnotData <- sigAnnotData[!(names(TBsignatures)%in%c("Darboe_RISK_11","Dawany_HIV_251","Tornheim_71","Tornheim_RES_25")),]
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
annotationSignature = sigAnnotData[order(sigAnnotData[,1]),],
colList = colorList)
SummarizedExperiment::colData(ssgsea_res)$`BATF2` <- assay(indata, "log_cpm")["BATF2", ]
SummarizedExperiment::colData(ssgsea_res)$`NPC2` <- assay(indata, "log_cpm")["NPC2", ]
SummarizedExperiment::colData(gsva_res)$`BATF2` <- assay(indata, "log_cpm")["BATF2", ]
SummarizedExperiment::colData(gsva_res)$`NPC2` <- assay(indata, "log_cpm")["NPC2", ]
SummarizedExperiment::colData(plage_res)$`BATF2` <- assay(indata, "log_cpm")["BATF2", ]
SummarizedExperiment::colData(plage_res)$`NPC2` <- assay(indata, "log_cpm")["NPC2", ]
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
annotationSignature = sigAnnotData[order(sigAnnotData[,1]),],
colList = colorList)
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
colList = colorList)
TBsignatures$"BATF2" <- "BATF2"
TBsignatures$"NPC2" <- "NPC2"
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
colList = colorList)
sigAnnotData <- rbind(sigAnnotData,rbind(c(names="BATF2",disease="SingleGene",tissue_type="whole"),c(names="NPC2",disease="SingleGene",tissue_type="whole")))
signatureHeatmap(ssgsea_res, name = "ssGSEA",
signatureColNames = names(TBsignatures),
annotationColNames = c("status"),
showColumnNames = FALSE, scale = TRUE,
choose_color = col.me,
cluster_columns = TRUE,
split_heatmap = "disease",
colList = colorList)
signatureHeatmap
names(TBsignatures)
colData(ssgsea_res)
devtools::install_github("compbiomed/TBSignatureProfiler")
library(TBSignatureProfiler)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SingleCellExperiment)
library(tidyverse)
library(TBSignatureProfiler)
library(sva)
library(Rtsne)
library(umap)
library(limma)
library(DT)
library(ComplexHeatmap)
library(enrichR)
library(singleCellTK)
})
## remove the following signatures from the list, as they were not part of the TBSG at the time of submission:
TBsignatures <- TBsignatures[!(names(TBsignatures)%in%c("Darboe_RISK_11","Dawany_HIV_251","Tornheim_71","Tornheim_RES_25"))]
# Chunk 5: load
indata <- readRDS("indata_SCE_batchcorrect.rds")
dim(indata)
## Filter to have 10% present rate
indata <- indata[apply(assay(indata,"counts") != 0, 1, mean)>.20,]
dim(indata)
### Malnutrition only
indata <- indata[,which(colData(indata)$bmi_cat2 == "mal")]
dim(indata)
# Chunk 6
indataTMP <- indata
indataTMP <- mkAssay(indataTMP, input_name = "counts", log=T)
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indataTMP, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indataTMP)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_raw.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
rm(indataTMP)
# Chunk 7
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
png(filename = "figures/PCA_adj_colbatch.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, colorBy = "batch",shape = "status")
dev.off()
rm(indataSCE)
# Chunk 8
indataSCE <- SingleCellExperiment(assays = list(log_cpm = assay(indata, "log_cpm")), colData = colData(indata))
colnames(indataSCE) <- colnames(indata)
dim(indataSCE)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch",colorBy = "status")
png(filename = "figures/PCA_adj_colstatus.png", width = 4, height = 3, units = "in",
res = 150)
singleCellTK::plotPCA(indataSCE, useAssay = "log_cpm", runPCA = TRUE, shape = "batch", colorBy = "status")
dev.off()
rm(indataSCE)
# Chunk 9
set.seed(1)
tsne_out <- Rtsne(t(assay(indata,"log_cpm")), check_duplicates = FALSE, pca = TRUE, perplexity=10, theta=0.5, dims=2)
embedding <- as.data.frame(tsne_out$Y)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("T-SNE 1") + ylab("T-SNE 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("TSNE Plot")
plot(g)
# Chunk 10
set.seed(1)
umap_out <- umap(t(assay(indata,"log_cpm")))
embedding <- as.data.frame(umap_out$layout)
embedding$Class <- as.factor(indata$Tb_status)
g <- ggplot(embedding, aes(x=V1, y=V2, color=Class, label = colnames(assay(indata,"log_cpm")))) + geom_point(size=1.5) + xlab("UMAP 1") + ylab("UMAP 2") + theme(plot.title = element_text(hjust = 0.5)) +
ggtitle("UMAP Plot")
plot(g)
# Chunk 11
designBC <- model.matrix(~Tb_status, data=colData(indata))
colnames(designBC) <- c("Intercept", "activeTB")
fitBC <- lmFit(assay(indata, "log_cpm"), designBC)
contrast.matrixTB<- makeContrasts(activeTB, levels = designBC)
fitTB <- contrasts.fit(fitBC,contrast.matrixTB)
fitTB <- eBayes(fitTB)
limmaResTB <- topTable(fitTB, adjust.method = "BH", n = Inf, sort.by = "P")
#Getting significant genes and rownames to plot
adjpcutoff <- 0.01
limmaResTB.sig <- subset(limmaResTB, adj.P.Val < adjpcutoff)
write.csv(limmaResTB.sig,"figures/malnut_only_siggenes.csv",quote=F)
datatable(limmaResTB.sig,options=list(scrollX=T,pageLength=15),rownames = T)
mean(unlist(TBsignatures) %in% rownames(limmaResTB.sig))
### keep only protein coding genes
annotations <- rowData(indata)[match(rownames(limmaResTB.sig), rowData(indata)[,1]),2]
table(annotations)
sigGenesTB <-rownames(limmaResTB.sig[annotations=="protein_coding",])
# Chunk 12
mat = as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df=data.frame(TB_status=colData(indata)$Tb_status)
ha = HeatmapAnnotation(df = df, col = list(TB_status=c("TB"="Red","LTBI"="Blue")))
Heatmap(mat,show_row_names=F,show_column_names = F, top_annotation = ha)
# Chunk 13
# some things related to colors
special_red <- RColorBrewer::brewer.pal(3, "Set1")[1]
special_blue <- RColorBrewer::brewer.pal(3, "Set1")[2]
# COLORS FOR HEATMAP
col.me <- viridis::viridis(15)
colorList <- list("status" = setNames(c("Red",
"Blue"),
c("TB_mal", "LTBI_mal")))
mat <- as.matrix(assay(indata,"log_cpm")[sigGenesTB[1:500],])
mat = t(scale(t(mat)))
df <- data.frame("TB Status" = colData(indata)$Tb_status)
annot <- HeatmapAnnotation(df = df, col = list(TB.Status = c(
"TB" = "Red", "LTBI" = "Blue")))
png(filename = "figures/Heatmap_DIFF_EXP.png", width = 12, height = 10, units = "in",
res = 150)
Heatmap(mat, show_row_names = F,
show_column_names = F,
top_annotation = annot,
col = col.me,
name = "Expression")
dev.off()
# Chunk 14
pathway=enrichr(sigGenesTB[1:1000],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#try 250, 500, 2000 and all genes per the paper reviewers request
#pathway=enrichr(sigGenesTB[1:250],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB[1:500],databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB[1:2000],databases =c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
#pathway=enrichr(sigGenesTB,databases = c("WikiPathways_2013","Reactome_2016","KEGG_2016","Panther_2016"))
# Chunk 15
datatable(pathway$WikiPathways_2013[pathway$WikiPathways_2013$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 16
datatable(pathway$Reactome_2016[pathway$Reactome_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 17
datatable(pathway$KEGG_2016[pathway$KEGG_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
# Chunk 18
datatable(pathway$Panther_2016[pathway$Panther_2016$Adjusted.P.value<.5,],options=list(scrollX=T,pageLength=15),rownames = F)
BiocManager::install()
install.packages("Cairo")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SummarizedExperiment)
library(SingleCellExperiment)
library(tidyverse)
library(TBSignatureProfiler)
library(sva)
library(Rtsne)
library(umap)
library(limma)
library(DT)
library(ComplexHeatmap)
library(enrichR)
library(singleCellTK)
})
library(SummarizedExperiment)
library(SingleCellExperiment)
library(tidyverse)
library(TBSignatureProfiler)
library(sva)
library(Rtsne)
library(umap)
library(limma)
library(DT)
library(ComplexHeatmap)
library(enrichR)
library(singleCellTK)
library(ComplexHeatmap)
indata$TB.status <- factor(paste(indata$status))
ssgsea_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "ssGSEA")
gsva_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "GSVA")
plage_res <- runTBsigProfiler(indata, useAssay = "log_cpm",
algorithm = "PLAGE")
indata <- readRDS("indata_SCE_batchcorrect.rds")
dim(indata)
## Filter to have 10% present rate
indata <- indata[apply(assay(indata,"counts") != 0, 1, mean)>.20,]
dim(indata)
### Malnutrition only
indata <- indata[,which(colData(indata)$bmi_cat2 == "mal")]
dim(indata)
install.packages("Cairo")
library(Cairo)
